Given Program: 2,4,1,1,7,5,0,3,1,4,4,5,5,5,3,0

Instructions
 0 adv |> divideA      newA = oldA / (2 ^ combo op) 
 1 bxl |> bitwiseXor   newB = oldB `XOR` op
 2 bst |> modB         newB = combo op `mod` 8  
 3 jnz |> jump nonzero newIC = if A == 0 then oldIC + 2 else op
 4 bxc |> xorBC        newB = oldB `XOR` oldC                    || Skips operand
 5 out |> output       outputs (combo op `mod` 8) 
 6 bdv |> divideB      newB = oldA / (2 ^ combo op) 
 7 cdv |> divideC      newC = oldA / (2 ^ combo op)

{-
-- oldA / (2 ^ combo op)
newA = Case (combo op) of
  0 -> oldA
  1 -> oldA / 2        (>>)
  2 -> oldA / 4        (2x >>)
  3 -> oldA / 8        (3x >>)
  4 -> oldA / 2 ^ oldA (const 0)
  5 -> oldA / 2 ^ oldB ??
  6 -> oldA / 2 ^ oldC ??
-}

iteration(A, B, C)
B = oldA `mod` 8      || bst 4,
B = oldB `XOR` 1      || bxl 1,
C = oldA / (2 ^ oldB) || cdv 5,
A = oldA / 8          || adv 3,
B = oldB `XOR` 4      || bxl 4,
B = oldB `XOR` oldC   || bxc 5,
write B               || out 5,      
jump 0                || jnz 0

A = oldA / 8
B = (inter `XOR` 4) `XOR` (oldA / 2 ^ inter)
C = inter
 where
  inter =  ((oldA `mod` 8) `XOR` 1)

A = oldA >>> 3
B = ((oldA .&&. 111) `XOR` 100) `XOR` (oldA >>> inter)
C = inter
 where
  inter =  ((oldA .&&. 111) `XOR` 001)
  
16 Iterations. size A = 16 * 3 bits.

Given Program: 2,4,1,1,7,5,0,3,1,4,4,5,5,5,3,0

A = oldA >>> 3
B = (curr3 `XOR` 101) `XOR` (oldA >>> (curr3 `XOR` 001))
C = (curr3 `XOR` 001)

resA = |_1_|_2_|_3_|_4_|__....
 B |_1_| == last solution
 B |_2_| == last (dropLast solution)
 .
 .
 .